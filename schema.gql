# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddPersonaInput {
  uuid: String!
  persona: CreatePersonaInput!
}

type AgregatedPersona {
  uuid: String
  card: CardType
  page: PageType
  personaUUIDs: [String!]
  qrCodeLink: String
  networkList: [AgregatedPersona!]
  recommendList: [AgregatedPersona!]
  spotRecommendList: [AgregatedSpot!]
  contactBook: [AgregatedPersona!]
  spotBook: [AgregatedSpot!]
  visibilityList: [AgregatedPersona!]
  spotVisibilityList: [AgregatedSpot!]
  spotNetworkList: [AgregatedSpot!]
}

type AgregatedSpot {
  uuid: String
  card: CardType
  page: PageType
  personaUUIDs: [String!]
  qrCodeLink: String
  canPersonaParticipate: Boolean
  canBeRecommended: Boolean
  networkList: [AgregatedPersona!]
  spotNetworkList: [AgregatedSpot!]
  recommendList: [AgregatedPersona!]
  spotRecommendList: [AgregatedSpot!]
  contactBook: [AgregatedPersona!]
  spotBook: [AgregatedSpot!]
  visibilityList: [AgregatedPersona!]
  spotVisibilityList: [AgregatedSpot!]
  owner: AgregatedPersona
  participants: [AgregatedPersona!]
  managers: [AgregatedPersona!]
  invitedManagerEmails: [EmailInvitation!]
}

input CardInput {
  name: String!
  description: String!
  avatar: String
  background: String
}

type CardType {
  name: String!
  description: String!
  avatar: String
  background: String
}

input ConnectPersonaInput {
  uuid: String!
  personaUUID: String!
}

input CreatePersonaInput {
  card: CardInput!
  page: PageInput!
}

input CreateShareableInput {
  card: CardInput!
  page: PageInput!
}

type EmailInvitation {
  email: String!
  status: String!
}

input EmailInvitationInput {
  email: String!
  status: String!
}

type Mutation {
  loginUser(idToken: String!): UserLoginType!
  logout: Boolean!
  updateUser(uuid: String!, user: UpdateUserInput!): UserType!
  removeUser(condition: UserInput!): Float!
  createPersona(persona: CreatePersonaInput!): PersonaType!
  setDefaultPersona(uuid: String!): PersonaType!
  updatePersona(uuid: String!, persona: UpdatePersonaInput!): PersonaType!
  connectPersona(input: ConnectPersonaInput!): PersonaType!
  recommendPersona(recommendedPersonaUuid: String!): PersonaType!
  savePersona(savedPersonaUuid: String!): PersonaType!
  removePersona(personaUuid: String!): Boolean!
  createSpot(spot: CreateShareableInput!): SpotType!
  participate(spotId: String!): AgregatedSpot!
  addManager(email: String!, personaId: String!, spotId: String!): SpotType!
  recommendSpot(recommendedSpotUuid: String!): SpotType!
  saveSpot(savedSpotUuid: String!): AgregatedPersona!
  updateSpot(uuid: String!, spot: UpdateSpotInput!): SpotType!
  removeSpot(spotUuid: String!): Boolean!
}

input PageInput {
  content: String!
  avatar: String
  background: String
  fileList: [UploadFileInput!]
}

type PageType {
  avatar: String
  background: String
  content: String!
  fileList: [UploadFileDto!]
}

input PersonaInput {
  uuid: String!
  isActive: Boolean
}

type PersonaType {
  uuid: String!
  card: CardType!
  page: PageType!
  personaUUIDs: [String!]
  qrCodeLink: String!
  userId: String!
  networkList: [String!]
  spotNetworkList: [String!]
  recommendList: [String!]
  spotRecommendList: [String!]
  contactBook: [String!]
  visibilityList: [String!]
  spotVisibilityList: [String!]
  spotBook: [String!]
}

type Query {
  user: UserType
  persona(uuid: String!): AgregatedPersona
  userPersonas: [AgregatedPersona!]
  spot(uuid: String!): AgregatedSpot
  userSpots: [SpotType!]
}

input RemovePersonaInput {
  uuid: String!
  personaUUID: String!
}

input SpotInput {
  uuid: String
  owner: String
  isActive: Boolean
}

type SpotType {
  uuid: String!
  card: CardType!
  page: PageType!
  personaUUIDs: [String!]
  qrCodeLink: String!
  userId: String!
  networkList: [String!]
  recommendList: [String!]
  contactBook: [String!]
  visibilityList: [String!]
  owner: String!
  participants: [String!]
  managers: [String!]
  invitedManagerEmails: [EmailInvitation!]
}

input UpdatePersonaInput {
  card: CardInput
  page: PageInput
}

input UpdateSpotInput {
  card: CardInput
  page: PageInput
  invitedManagerEmails: [EmailInvitationInput!]
}

input UpdateUserInput {
  name: String
  email: String
  photo: String
}

type UploadFileDto {
  uid: String!
  size: Float!
  name: String!
  url: String!
  thumbUrl: String!
  status: String!
}

input UploadFileInput {
  uid: String!
  size: Float!
  name: String!
  url: String!
  thumbUrl: String!
  status: String!
}

input UserInput {
  uuid: String
  name: String
  url: String
}

type UserLoginType {
  user: UserType!
}

type UserType {
  uuid: String!
  kind: String!
  name: String!
  email: String!
  photo: String
  personaUUIDs: [String!]
  defaultPersona: String
  spots: [String!]
}
